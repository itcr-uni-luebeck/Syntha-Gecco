/*
 * This file defines the steps to build Synthea using Gradle. Full documentation of the syntax
 * can be found at https://docs.gradle.org/6.5/userguide/java_plugin.html
 */

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        // commons-io used in getting the version id below
        classpath group: 'commons-io', name: 'commons-io', version: '2.5'
        // note that commons-io is already a dependency
        // of commons-csv in the primary dependencies above
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '5.0.0'
}

// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the groovy plugin to add support for Groovy
apply plugin: 'groovy'

compileJava {
    sourceCompatibility = '11'
    targetCompatibility = '11'
}


apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'signing'

mainClassName = 'org.uzl.syntheagecco.Main'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven { url 'https://jitpack.io' }
}

checkstyle {
    toolVersion '8.4'
    //showViolations = true
}

jacoco {
    toolVersion '0.8.6'
}

configurations.all {
    resolutionStrategy.force 'org.antlr:antlr4-runtime:4.9.1'
    resolutionStrategy.force 'org.antlr:antlr4-tool:4.9.1'
}

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.jayway.jsonpath:json-path:2.4.0'
    implementation 'ca.uhn.hapi.fhir:hapi-fhir-base:5.2.0'
    implementation 'ca.uhn.hapi.fhir:hapi-fhir-validation:5.2.0'
    implementation 'ca.uhn.hapi.fhir:hapi-fhir-validation-resources-r4:5.2.0'
    implementation 'ca.uhn.hapi.fhir:hapi-fhir-structures-dstu3:5.2.0'
    implementation 'ca.uhn.hapi.fhir:hapi-fhir-structures-dstu2:5.2.0'
    implementation 'ca.uhn.hapi.fhir:hapi-fhir-structures-r4:5.2.0'
    implementation 'ca.uhn.hapi.fhir:hapi-fhir-client:5.2.0'
    // C-CDA export uses Apache FreeMarker templates
    implementation 'org.freemarker:freemarker:2.3.26-incubating'

    // google guava for some data structures
    implementation 'com.google.guava:guava:30.0-jre'
    implementation 'guru.nidi:graphviz-java:0.2.4'
    // CSV Stuff
    implementation 'org.apache.commons:commons-csv:1.5'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.8.8'
    implementation 'org.yaml:snakeyaml:1.27'
    implementation 'org.apache.commons:commons-math3:3.6.1'
    implementation 'org.apache.commons:commons-text:1.2'
    implementation 'commons-validator:commons-validator:1.4.0'

    implementation 'org.opencds.cqf:cql-engine:1.3.12'
    implementation 'info.cqframework:cql:1.3.17'
    implementation 'info.cqframework:model:1.3.17'
    implementation 'info.cqframework:cql-to-elm:1.3.17'

    implementation 'org.springframework:spring-web:5.2.7.RELEASE'

    // Java 9 no longer includes these APIs by default
    implementation 'javax.xml.bind:jaxb-api:2.3.0'
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.0'
    implementation 'javax.activation:activation:1.1.1'

    // get rid of SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
    // if we switch to a real logging framework we may want to switch this
    implementation "org.slf4j:slf4j-api:1.7.9"
    // compile "org.slf4j:slf4j-nop:1.6.1" // SLF4J seems to already be provided by org.apache.logging.log4j

    // Physiology simulation dependencies
    implementation files('lib/sbscl/SimulationCoreLibrary_v1.5_slim.jar')
    implementation 'org.sbml.jsbml:jsbml:1.5', {
        exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j-impl'
    }
    implementation 'org.apache.commons:commons-math:2.2'

    // JfreeChart for drawing physiology charts
    implementation 'org.jfree:jfreechart:1.5.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    testImplementation fileTree(dir: 'lib/mdhtruntime/mdht', include: '*.jar')
    testImplementation fileTree(dir: 'lib/mdhtruntime/non-mdht', include: '*.jar')
    testImplementation 'org.mockito:mockito-core:2.19.0'
    testImplementation 'org.powermock:powermock-module-junit4:1.7.1'
    testImplementation 'org.powermock:powermock-api-mockito2:1.7.1'
    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.26.3'
    testImplementation 'ca.uhn.hapi.fhir:hapi-fhir-validation:5.2.0'
    testImplementation 'ca.uhn.hapi.fhir:hapi-fhir-validation-resources-r4:5.2.0'
    testImplementation 'ca.uhn.hapi.fhir:hapi-fhir-validation-resources-dstu3:5.2.0'
    testImplementation 'ca.uhn.hapi.fhir:hapi-fhir-validation-resources-dstu2:5.2.0'
    //testImplementation 'com.helger:ph-schematron:5.0.4'
    //testImplementation 'com.helger:ph-commons:9.1.1'

    //log4j2
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.1'


    //Jackson
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.12.3'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.3'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.12.3'

    //Synthea
    implementation 'org.mitre.synthea:synthea:2.7.0'


    //Groovy
    implementation 'org.codehaus.groovy:groovy-all:2.5.4'

    // https://mvnrepository.com/artifact/com.helger/ph-schematron
    //This is needed for HAPI FHIR validation
    //implementation group: 'com.helger', name: 'ph-schematron', version: '5.6.5'

    // https://mvnrepository.com/artifact/com.squareup/javapoet
    implementation 'com.squareup:javapoet:1.13.0'

    implementation 'com.github.ehrbase.openEHR_SDK:aql:v1.5.0'

    // https://mvnrepository.com/artifact/org.antlr/antlr4-runtime
    implementation('org.antlr:antlr4-runtime') {
        version {
            strictly '4.9.1'
        }
    }

    // https://mvnrepository.com/artifact/org.antlr/antlr4
    implementation('org.antlr:antlr4') {
        version {
            strictly '4.9.1'
        }
    }

}

shadowJar {
    archiveBaseName.set('syntheagecco')
    zip64 true

    exclude 'App.class'
}

/*
compileGroovy {
    groovyOptions.configurationScript = file("gradle/Config.groovy")
}
*/

// Provide more descriptive test failure output
test {
    testLogging {
        exceptionFormat = 'full'
        // showExceptions = true
        // showCauses = true
        // showStackTraces = true
        // showStandardStreams = true
    }
    maxHeapSize = "6144m"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

check.dependsOn jacocoTestReport

task graphviz(type: JavaExec) {
    group 'Application'
    description 'Generate rule visualization'
    classpath sourceSets.main.runtimeClasspath
    main = "Graphviz"
}

task uberJar(type: Jar) {
    def versionFile = new File("$projectDir/src/main/resources/version.txt")
    def versionText = "N/A"
    if (versionFile.exists()) {
        versionText = versionFile.text.trim()
    }
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    manifest {
        attributes(
                'Main-Class': 'App',
                'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                'Build-Version': versionText,
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
        )
    }
    archiveBaseName = 'synthea-with-dependencies'
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

/*
task customFatJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    zip64 true
    manifest {
        attributes 'Main-Class': 'org.uzl.syntheagecco.Main'
    }
    baseName = 'syntheagecco'
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
*/

task concepts(type: JavaExec) {
    group 'Application'
    description 'Create a list of simulated concepts'
    classpath sourceSets.main.runtimeClasspath
    main = "org.mitre.synthea.helpers.Concepts"
    args 'false'
}

task conceptswithoutcosts(type: JavaExec) {
    group 'Application'
    description 'Create a list of simulated concepts without costs'
    classpath sourceSets.main.runtimeClasspath
    main = "org.mitre.synthea.helpers.Concepts"
    args 'true'
}

task attributes(type: JavaExec) {
    group 'Application'
    description 'Create a list of patient attributes'
    classpath sourceSets.main.runtimeClasspath
    main = "org.mitre.synthea.helpers.Attributes"
}

task overrides(type: JavaExec) {
    group 'Application'
    description 'Create a list of modules parameters in module override format'
    classpath sourceSets.main.runtimeClasspath
    main = "org.mitre.synthea.helpers.ModuleOverrides"
    doFirst {
        // TODO: is there a way to make this cleaner?
        String includeFields = project.hasProperty('includeFields') ? project.getProperty('includeFields') : ""
        String includeModules = project.hasProperty('includeModules') ? project.getProperty('includeModules') : ""
        String excludeFields = project.hasProperty('excludeFields') ? project.getProperty('excludeFields') : ""
        String excludeModules = project.hasProperty('excludeModules') ? project.getProperty('excludeModules') : ""

        args(includeFields, includeModules, excludeFields, excludeModules)
    }
}

task physiology(type: JavaExec) {
    group 'Application'
    description 'Test a physiology simulation'
    classpath sourceSets.main.runtimeClasspath
    main = "org.mitre.synthea.engine.PhysiologySimulator"
}

task versionTxt() {
    group 'Build'
    description 'Generates a version file.'
    doLast {
        try {
            // the ruby version uses `git rev-parse HEAD` which just produces the long commit hash.
            // "git describe" can use tags or fallback to the commit hash if necessary.
            // this assumes (as does the ruby version) that git will always be present when building
            String[] cmd = ["git", "describe", "--tags", "--always"]
            Process p = Runtime.getRuntime().exec(cmd)
            p.waitFor()
            def version = org.apache.commons.io.IOUtils.toString(p.getInputStream(), java.nio.charset.StandardCharsets.UTF_8)
            def file = new File("$projectDir/src/main/resources/version.txt")
            file.createNewFile()
            file.text = version
        } catch (e) {
            // ex. if git is not installed, or if we can't write the file for some reason. it's not critical to the execution so don't crash
            logger.warn("Warning: unable to create version.txt. Generated records will not indicate which version of Synthea was used to create them.")
            logger.warn(e.getMessage())
        }
    }
}

compileJava.dependsOn versionTxt
uberJar.dependsOn versionTxt

task cleanOutput {
    doLast {
        delete fileTree(dir: 'output', include: '**/*')
    }
}

run {
    // args are called "arams" because they are called with -P,
    // ex. gradle run -Params="['arg1', 'args2']"
    // see https://stackoverflow.com/questions/27604283/gradle-task-pass-arguments-to-java-application
    if (project.hasProperty("arams")) {
        args Eval.me(arams)
    }
    def maxHeapSizeVar = System.getenv("MAX_HEAP_SIZE")
    if (maxHeapSizeVar != null) {
        maxHeapSize = maxHeapSizeVar
    }
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

def mavenGroup = 'org.mitre.synthea'
def mavenVersion = '3.0.0-SNAPSHOT'

publishing {
    publications {
        synthea(MavenPublication) {
            groupId mavenGroup
            version mavenVersion
            from components.java

            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }
            pom {
                name = 'Synthea'
                description = 'Synthetic Patient Population Simulator'
                url = 'https://github.com/synthetichealth/synthea'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/synthetichealth/synthea.git'
                    developerConnection = 'scm:git:ssh://github.com:synthetichealth/synthea.git'
                    url = 'http://github.com/synthetichealth/synthea/tree/master'
                }
                developers {
                    developer {
                        name = 'Jason Walonoski'
                        email = 'jwalonoski@mitre.org'
                        organization = 'The MITRE Corporation'
                        organizationUrl = 'http://www.mitre.org/'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            def snapshotUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
            def releaseUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            url mavenVersion.endsWith('SNAPSHOT') ? snapshotUrl : releaseUrl
            credentials {
                def user = project.hasProperty('sonatypeUsername') ? sonatypeUsername : ''
                def pw = project.hasProperty('sonatypePassword') ? sonatypePassword : ''
                username user
                password pw
            }
        }
    }
}